[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add='''
let g:indent_guides_enable_on_vim_startup = 1
hi indentGuidesEven ctermbg=black
hi indentGuidesOdd ctermbg=darkgrey
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add ='''
let g:quickrun_config={'*': {'split': 'vertical'}}
set splitright
nnoremap <silent> <C-q> :QuickRun<CR>
'''
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'Tpope/vim-surround'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%t'
let g:airline_section_x = '%{&filetype}'
let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#ale#error_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1
'''
[[plugins]]
repo = 'tyru/caw.vim'
  hook_add = '''
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
  '''

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'Osyo-manga/unite-quickfix'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add ='''
let g:EasyMotion_do_mapping = 0
nmap s   <Plug>(easymotion-s2)
xmap s   <Plug>(easymotion-s2)
omap z   <Plug>(easymotion-s2)
nmap g/  <Plug>(easymotion-sn)
xmap g/  <Plug>(easymotion-sn)
omap g/  <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-j)
let g:Easyotion_keys = 'QZASDFGHJKL;'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
hi EasyMotionTarget guifg=#ffff00 ctermfg=81
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'Shougo/vimfiler.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_add ='''
let g:python3_host_prog = '/usr/bin/python3'
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 2
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 100
inoremap <expr><TAB> pumvisible() ? "\<C-N>" : neosnippet#jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'koron/imcsc-vim'

[[plugins]]
repo = 'kana/vim-smartchr'
on_i = 1

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_i = 1

[[plugins]]
repo = 'vim-scripts/zoom.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_autoscroll=1
tnoremap <silent> <ESC> <C-\><C-n><C-w>
nnoremap <silent> <C-R> V:TREPLSendLine<cr>
vnoremap <silent> <C-R> V:TREPLSendSelection<cr>'>j$
'''

[[plugins]]
repo = 'soramugi/auto-ctags.vim'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_lint_on_text_changed = 0
let g:ale_linters = {
  \ 'python3': ['pylint']
  \}
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'JulioJu/neovim-qt-colors-solarized-truecolor-only'
hook_add = '''
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
colorscheme badwolf
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
on_i = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo='pdavydov108/vim-lsp-cquery'
hook_add='''
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fv :LspCqueryDerived<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fc :LspCqueryCallers<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fb :LspCqueryBase<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fi :LspCqueryVars<CR>
'''

[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
if executable('cquery')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'cquery',
      \ 'cmd': {server_info->['cquery']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': { 'cacheDirectory': '/tmp/cquery/cache' },
      \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
      \ })
endif
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}

let g:asyncomplete_completion_delay=10
'''
[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

# [[plugins]]
# repo='scrooloose/nerdtree'
# hook_add='''
# let g:NERDTreeShowBookmarks=0
# autocmd vimenter * NERDTree
#
# " NERDTress File highlighting
# " function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
# "   exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
# "   exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
# " endfunction
# call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
# call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
# call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
# call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
# call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
# call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
# call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')
# let g:NERDTreeDirArrows = 1
# let g:NERDTreeDirArrowExpandable  = '>'
# let g:NERDTreeDirArrowCollapsible = 'd'
# '''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-p)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'ujihisa/neco-look'
